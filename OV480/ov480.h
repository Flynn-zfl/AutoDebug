//////////////////////////////////////////////////////////////////////////////
// File Name   : ov480.h
// Description : OV480 register declarations
// Author      : Bo-Yi Lin, OmniVision Technologie Inc.
//////////////////////////////////////////////////////////////////////////////
// Major Functions
//////////////////////////////////////////////////////////////////////////////
// CVS Revision History
// $Id: ov480.h,v 1.4 2013/11/14 21:50:38 boyi Exp $
// $Log: ov480.h,v $
// Revision 1.4  2013/11/14 21:50:38  boyi
// V1.5, plus 30p FPS switch update
//
// Revision 1.3  2012/10/16 00:29:45  boyi
// *** empty log message ***
//
// Revision 1.2  2012/08/01 18:28:55  boyi
// Modify headers
// Add log macro
//
//

#ifndef _OV480_H_
#define _OV480_H_

//#define REGISTER(addr,name) volatile __xdata __at (addr) unsigned char name
//
//REGISTER(0x0829, REG_WATCHDOG);	// unused register to set video watchdog timeout
//REGISTER(0x088E, REG_RCAP2L);	// unused register to set video watchdog timeout
//REGISTER(0x088F, REG_RCAP2H);	// unused register to set video watchdog timeout
//REGISTER(0x082F, REG_FASTSIM);	// unused register to indicate simulation speedup if = 1
//
//REGISTER(0x0883, REG_DYNLOAD_IDX);	// unused register to store dynamic loader index
//REGISTER(0x0857, REG_DYNLOAD_ARG0);	// unused register to store dynamic loader argument passing
//REGISTER(0x0858, REG_DYNLOAD_ARG1);	// unused register to store dynamic loader argument passing
//REGISTER(0x0859, REG_DYNLOAD_ARG2);	// unused register to store dynamic loader argument passing
//REGISTER(0x085A, REG_DYNLOAD_ARG3);	// unused register to store dynamic loader argument passing
//REGISTER(0x085B, REG_DYNLOAD_ARG4);	// unused register to store dynamic loader argument passing
//REGISTER(0x085C, REG_DYNLOAD_ARG5);	// unused register to store dynamic loader argument passing
//REGISTER(0x085D, REG_DYNLOAD_ARG6);	// unused register to store dynamic loader argument passing
//REGISTER(0x085E, REG_DYNLOAD_ARG7);	// unused register to store dynamic loader argument passing
//REGISTER(0x085F, REG_DYNLOAD_ARG8);	// unused register to store dynamic loader argument passing
//REGISTER(0x0860, REG_DYNLOAD_ARG9);	// unused register to store dynamic loader argument passing
//
//REGISTER(0x0884, REG_TASK_ID);		// unused register to perform task handshaking
//REGISTER(0x0877, REG_TASK_ARG0);	// unused register for task handshaking argument
//REGISTER(0x0878, REG_TASK_ARG1);	// unused register for task handshaking argument
//REGISTER(0x0879, REG_TASK_ARG2);	// unused register for task handshaking argument
//REGISTER(0x087A, REG_TASK_ARG3);	// unused register for task handshaking argument
//REGISTER(0x087B, REG_TASK_ARG4);	// unused register for task handshaking argument
//REGISTER(0x087C, REG_TASK_ARG5);	// unused register for task handshaking argument
//REGISTER(0x087D, REG_TASK_ARG6);	// unused register for task handshaking argument
//REGISTER(0x087E, REG_TASK_ARG7);	// unused register for task handshaking argument
//
//// Additional available scratch registers
//// 0x0A46~0x0A4F
//// 0x0B0C~0x0B25
//// 0x0A0D
//// 0x0A12~0x0A15
//
//// REGISTER(*) is used for direct manipulation
//// #define is used for argument passing to functions 
//#define MCU_BASE 0x7FC0
//REGISTER(MCU_BASE+0x00, REG_MCU_REBOOT_CTRL);
//REGISTER(MCU_BASE+0x01, REG_INT2_MASK);
//REGISTER(MCU_BASE+0x02, REG_INT4_MASK);
//REGISTER(MCU_BASE+0x04, REG_INT2_STAT);
//REGISTER(MCU_BASE+0x05, REG_INT4_STAT);
//#define INT2_STAT MCU_BASE+0x04
//#define INT4_STAT MCU_BASE+0x05
//#define INT4_TXFIFO	0x80
//#define INT4_RXFIFO	0x40
//#define INT4_XMEMRD	0x20
//#define INT4_XMEMWR	0x10
//#define INT4_VSYNC	0x08
//#define INT4_DCPC	0x04
//#define INT4_OSD	0x02
//#define INT4_TVENC	0x01
//REGISTER(MCU_BASE+0x06, REG_GPIO_INP);
//#define GPIO_INP	MCU_BASE+0x06
//REGISTER(MCU_BASE+0x07, REG_GPIO_OUT);
//REGISTER(MCU_BASE+0x08, REG_GPIO_OEN);
//REGISTER(MCU_BASE+0x09, REG_XGPIO_EN);
//REGISTER(MCU_BASE+0x0A, REG_XGPIO_INP);
//REGISTER(MCU_BASE+0x0B, REG_XGPIO_OUT);
//REGISTER(MCU_BASE+0x0C, REG_XGPIO_OEN);
//REGISTER(MCU_BASE+0x0D, REG_IGPIO_EN);
//REGISTER(MCU_BASE+0x0E, REG_IGPIO_INP);
//REGISTER(MCU_BASE+0x0F, REG_IGPIO_OUT);
//REGISTER(MCU_BASE+0x10, REG_IGPIO_OEN);
//REGISTER(MCU_BASE+0x11, REG_MCU_DVP_SEL);
//REGISTER(MCU_BASE+0x13, REG_MCU_PATH_RST);
//REGISTER(MCU_BASE+0x15, REG_TP_CTL);
//REGISTER(MCU_BASE+0x1A, REG_CHIP_ID);
//REGISTER(MCU_BASE+0x1B, REG_CHIP_VER);
//REGISTER(MCU_BASE+0x1F, REG_PLLA_CFG);
//REGISTER(MCU_BASE+0x20, REG_PLLA_CFG0);
//REGISTER(MCU_BASE+0x21, REG_PLLA_CFG1);
//REGISTER(MCU_BASE+0x22, REG_PLLA_CFG2);
//REGISTER(MCU_BASE+0x23, REG_PLLB_CFG);
//REGISTER(MCU_BASE+0x24, REG_PLLB_CFG0);
//REGISTER(MCU_BASE+0x25, REG_PLLB_CFG1);
//REGISTER(MCU_BASE+0x26, REG_PLLB_CFG2);
//REGISTER(MCU_BASE+0x27, REG_CLK_ENA0);
//#define CLK_ENA0_MCU	0x02
//#define CLK_ENA0_SPI	0x01
//REGISTER(MCU_BASE+0x28, REG_CLK_ENA1);
//#define CLK_ENA1_PCLK	0x40
//#define CLK_ENA1_DCPC	0x20
//#define CLK_ENA1_SCLK	0x10
//#define CLK_ENA1_SCLK2	0x08
//#define CLK_ENA1_SCLK4	0x04
//#define CLK_ENA1_DAC	0x02
//#define CLK_ENA1_CCLK	0x01
//REGISTER(MCU_BASE+0x29, REG_CLK_SEL0);
//REGISTER(MCU_BASE+0x2A, REG_CLK_SEL1);
//REGISTER(MCU_BASE+0x2B, REG_CLK_SEL2);
//REGISTER(MCU_BASE+0x2C, REG_CLK_SEL3);
//REGISTER(MCU_BASE+0x2D, REG_CLK_SEL4);
//REGISTER(MCU_BASE+0x31, REG_PAD_IE3);
//REGISTER(MCU_BASE+0x32, REG_PAD_IE2);
//REGISTER(MCU_BASE+0x33, REG_PAD_IE1);
//REGISTER(MCU_BASE+0x34, REG_PAD_IE0);
//REGISTER(MCU_BASE+0x39, REG_PAD_OE3);
//REGISTER(MCU_BASE+0x3A, REG_PAD_OE2);
//REGISTER(MCU_BASE+0x3B, REG_PAD_OE1);
//REGISTER(MCU_BASE+0x3C, REG_PAD_OE0);
//REGISTER(MCU_BASE+0x3D, REG_PAD_PE);
//
//REGISTER(MCU_BASE+0x3E, REG_MCU_SRAM_SEL);
//#define MCU_SRAM_NONE	0x00
//#define MCU_SRAM_PROG	0x01
//
//#define EEPROM_BASE	0x0100
//REGISTER(EEPROM_BASE+0x0, REG_EEPROM_SPEED);
////volatile __xdata __at (EEPROM_BASE+0x0) unsigned char REG_EEPROM_SPEED;
//REGISTER(EEPROM_BASE+0x1, REG_EEPROM_DEVID);
//REGISTER(EEPROM_BASE+0x2, REG_EEPROM_ADDRH);
//REGISTER(EEPROM_BASE+0x3, REG_EEPROM_ADDRL);
//REGISTER(EEPROM_BASE+0x4, REG_EEPROM_DATOH);
//REGISTER(EEPROM_BASE+0x5, REG_EEPROM_DATOL);
//REGISTER(EEPROM_BASE+0x6, REG_EEPROM_WIDTH);
//REGISTER(EEPROM_BASE+0x7, REG_EEPROM_DATIH);
//REGISTER(EEPROM_BASE+0x8, REG_EEPROM_DATIL);
//REGISTER(EEPROM_BASE+0x9, REG_EEPROM_CTRL);
//REGISTER(EEPROM_BASE+0xA, REG_EEPROM_STAT);
//#define EEPROM_STAT EEPROM_BASE+0xA

#define I2C_BASE	0x0200
#define REG_I2C_SPEED (I2C_BASE+0x0) //volatile __xdata __at (I2C_BASE+0x0) unsigned char REG_I2C_SPEED;
#define REG_I2C_DEVID (I2C_BASE+0x1)
#define REG_I2C_ADDRH (I2C_BASE+0x2)
#define REG_I2C_ADDRL (I2C_BASE+0x3)
#define REG_I2C_DATOH (I2C_BASE+0x4)
#define REG_I2C_DATOL (I2C_BASE+0x5)
#define REG_I2C_WIDTH (I2C_BASE+0x6)
#define REG_I2C_DATIH (I2C_BASE+0x7)
#define REG_I2C_DATIL (I2C_BASE+0x8)
#define REG_I2C_CTRL  (I2C_BASE+0x9)
#define REG_I2C_STAT  (I2C_BASE+0xA)
#define I2C_STAT I2C_BASE+0xA

//#define SPI_BASE		0x0300
//REGISTER(SPI_BASE+0x0, REG_SPI_CTRL0);
//REGISTER(SPI_BASE+0x1, REG_SPI_CTRL1);
//REGISTER(SPI_BASE+0x2, REG_SPI_CTRL2);
//#define SPI_CTRL2_DIV2 0x01
//#define SPI_CTRL2_DIV4 0x02
//#define SPI_CTRL2_DIV6 0x03
//REGISTER(SPI_BASE+0x3, REG_SPI_CTRL3);
//REGISTER(SPI_BASE+0x4, REG_SPI_CTRL4);
//REGISTER(SPI_BASE+0x5, REG_SPI_CTRL5);
//REGISTER(SPI_BASE+0x6, REG_SPI_CTRL6);
//REGISTER(SPI_BASE+0x8, REG_SPI_DATA_IN);
//REGISTER(SPI_BASE+0x8, REG_SPI_DATA_OUT);
//REGISTER(SPI_BASE+0xC, REG_SPI_STATUS);	// not used
//REGISTER(SPI_BASE+0xD, REG_SPI_WBUFF_NFO);
//REGISTER(SPI_BASE+0xE, REG_SPI_RBUFF_NFO);
//#define SPI_RBUFF_NFO	SPI_BASE+0xE
//
//#define HPC_BASE	0x0500
//REGISTER(HPC_BASE+0x00, REG_HPC_CTRL);
//REGISTER(HPC_BASE+0x01, REG_HPC_DATA);
//
//#define FRCDNS_BASE	0x0600
//REGISTER(FRCDNS_BASE+0x08, REG_FRCDNS_FBSYNC);
//REGISTER(FRCDNS_BASE+0x09, REG_FRCDNS_OFFSET0);
//REGISTER(FRCDNS_BASE+0x0A, REG_FRCDNS_OFFSET1);
//REGISTER(FRCDNS_BASE+0x18, REG_FRCDNS_BYPASS);
//REGISTER(FRCDNS_BASE+0x07, REG_FRCDNS_CAPTURE_FRAME);
//
//#define DCPC_BASE	0x0700
//REGISTER(DCPC_BASE+0x00, REG_DCPC_CTL);
//#define DCPC_CTL		DCPC_BASE+0x00
//#define DCPC_CTL_ENAB	0x01
//#define DCPC_CTL_FIELD	0x02
//#define DCPC_CTL_ZOOM	0x04
//#define DCPC_CTL_HIT	0x08
//#define DCPC_CTL_4MB	0x10
//#define DCPC_CTL_FULL	0x20
//#define DCPC_CTL_SKIP	0x40
//#define DCPC_CTL_CYL	0x80
//REGISTER(DCPC_BASE+0x09, REG_DCPC_CACHE_TH);
//#define DCPC_CACHE_TH	DCPC_BASE+0x09
//REGISTER(DCPC_BASE+0x0A, REG_DCPC_STEP_XH);
//REGISTER(DCPC_BASE+0x0B, REG_DCPC_STEP_XL);
//REGISTER(DCPC_BASE+0x0C, REG_DCPC_STEP_YH);
//REGISTER(DCPC_BASE+0x0D, REG_DCPC_STEP_YL);
//REGISTER(DCPC_BASE+0x0E, REG_DCPC_PARA_L1);
//REGISTER(DCPC_BASE+0x1E, REG_DCPC_PARA_L2);
//REGISTER(DCPC_BASE+0x1F, REG_DCPC_PARA_H1);
//REGISTER(DCPC_BASE+0x20, REG_DCPC_PARA_H2);
//REGISTER(DCPC_BASE+0x0F, REG_DCPC_CACHE_IDXMAX);
//#define DCPC_CACHE_IDXMAX	DCPC_BASE+0x0F
//REGISTER(DCPC_BASE+0x10, REG_DCPC_SEL);
//REGISTER(DCPC_BASE+0x11, REG_DCPC_DATA);
//REGISTER(DCPC_BASE+0x12, REG_DCPC_ROIS_XH);
//REGISTER(DCPC_BASE+0x13, REG_DCPC_ROIS_XL);
//REGISTER(DCPC_BASE+0x14, REG_DCPC_ROIS_YH);
//REGISTER(DCPC_BASE+0x15, REG_DCPC_ROIS_YL);
//REGISTER(DCPC_BASE+0x16, REG_DCPC_ROIE_XH);
//REGISTER(DCPC_BASE+0x17, REG_DCPC_ROIE_XL);
//REGISTER(DCPC_BASE+0x18, REG_DCPC_ROIE_YH);
//REGISTER(DCPC_BASE+0x19, REG_DCPC_ROIE_YL);
//
//#define OSD_BASE	0x0800
//REGISTER(OSD_BASE+0x03, REG_OSD_EOFCLR);
//REGISTER(OSD_BASE+0x0D, REG_OSD_ENAB);
//REGISTER(OSD_BASE+0x11, REG_OSD_P0IDX);
//REGISTER(OSD_BASE+0x12, REG_OSD_P1IDX);
//REGISTER(OSD_BASE+0x13, REG_OSD_P2IDX);
//REGISTER(OSD_BASE+0x14, REG_OSD_P3IDX);
//REGISTER(OSD_BASE+0x15, REG_OSD_P3RES);
//REGISTER(OSD_BASE+0x16, REG_OSD_P2RES);
//REGISTER(OSD_BASE+0x17, REG_OSD_P1RES);
//REGISTER(OSD_BASE+0x18, REG_OSD_P0RES);
//REGISTER(OSD_BASE+0x2A, REG_OSD_LSEL3);
//REGISTER(OSD_BASE+0x2B, REG_OSD_LSEL2);
//REGISTER(OSD_BASE+0x2C, REG_OSD_LSEL1);
//REGISTER(OSD_BASE+0x2D, REG_OSD_LSEL0);
//REGISTER(OSD_BASE+0x73, REG_OSD_P0IDXH);
//REGISTER(OSD_BASE+0x74, REG_OSD_P1IDXH);
//REGISTER(OSD_BASE+0x75, REG_OSD_P2IDXH);
//REGISTER(OSD_BASE+0x76, REG_OSD_P3IDXH);
//REGISTER(OSD_BASE+0x85, REG_OSD_ENABALL);
//#define OSD_P0IDX	OSD_BASE+0x11
//#define OSD_P0IDXH	OSD_BASE+0x73
//#define OSD_XYCOORD_X	OSD_BASE+0x19
//#define OSD_XYCOORD_Y	OSD_BASE+0x1A
//
//#define DAMP_BASE	0x0900
//REGISTER(DAMP_BASE+0x0, REG_DAMP_CTL);
//REGISTER(DAMP_BASE+0x1, REG_DAMP_YMUL);
//REGISTER(DAMP_BASE+0x3, REG_DAMP_UMUL);
//REGISTER(DAMP_BASE+0x5, REG_DAMP_VMUL);
//
//#define TVENC_BASE	0x0A00
//REGISTER(TVENC_BASE+0x00, REG_TVENC_CTRL_H);
//REGISTER(TVENC_BASE+0x01, REG_TVENC_CTRL_L);
//REGISTER(TVENC_BASE+0x02, REG_TVENC_XSXOFFSET_H);
//REGISTER(TVENC_BASE+0x03, REG_TVENC_XSXOFFSET_L);
//REGISTER(TVENC_BASE+0x04, REG_TVENC_XSYOFFSET_H);
//REGISTER(TVENC_BASE+0x05, REG_TVENC_XSYOFFSET_L);
//REGISTER(TVENC_BASE+0x06, REG_TVENC_WIDTH_H);
//REGISTER(TVENC_BASE+0x07, REG_TVENC_WIDTH_L);
//REGISTER(TVENC_BASE+0x08, REG_TVENC_VSTART1_H);
//REGISTER(TVENC_BASE+0x09, REG_TVENC_VSTART1_L);
//REGISTER(TVENC_BASE+0x0A, REG_TVENC_VSTART2_H);
//REGISTER(TVENC_BASE+0x0B, REG_TVENC_VSTART2_L);
//REGISTER(TVENC_BASE+0x0C, REG_TVENC_VSTART3_H);
//REGISTER(TVENC_BASE+0x0D, REG_TVENC_VSTART3_L);
//REGISTER(TVENC_BASE+0x0E, REG_TVENC_VSTOP1_H);
//REGISTER(TVENC_BASE+0x0F, REG_TVENC_VSTOP1_L);
//REGISTER(TVENC_BASE+0x10, REG_TVENC_VSTOP2_H);
//REGISTER(TVENC_BASE+0x11, REG_TVENC_VSTOP2_L);
//REGISTER(TVENC_BASE+0x12, REG_TVENC_VSTOP3_H);
//REGISTER(TVENC_BASE+0x13, REG_TVENC_VSTOP3_L);
//REGISTER(TVENC_BASE+0x14, REG_TVENC_XSCALE);
//REGISTER(TVENC_BASE+0x15, REG_TVENC_YSCALE);
//REGISTER(TVENC_BASE+0x16, REG_TVENC_WHITELEVEL_H);
//REGISTER(TVENC_BASE+0x17, REG_TVENC_WHITELEVEL_L);
//REGISTER(TVENC_BASE+0x18, REG_TVENC_NORMLEVEL_H);
//REGISTER(TVENC_BASE+0x19, REG_TVENC_NORMLEVEL_L);
//REGISTER(TVENC_BASE+0x1A, REG_TVENC_BLANKLEVEL_H);
//REGISTER(TVENC_BASE+0x1B, REG_TVENC_BLANKLEVEL_L);
//REGISTER(TVENC_BASE+0x1C, REG_TVENC_SYNCLEVEL_H);
//REGISTER(TVENC_BASE+0x1D, REG_TVENC_SYNCLEVEL_L);
//REGISTER(TVENC_BASE+0x1E, REG_TVENC_BURSTLEVEL_H);
//REGISTER(TVENC_BASE+0x1F, REG_TVENC_BURSTLEVEL_L);
//REGISTER(TVENC_BASE+0x20, REG_TVENC_MINLEVEL_H);
//REGISTER(TVENC_BASE+0x21, REG_TVENC_MINLEVEL_L);
//REGISTER(TVENC_BASE+0x22, REG_TVENC_MAXLEVEL_H);
//REGISTER(TVENC_BASE+0x23, REG_TVENC_MAXLEVEL_L);
//REGISTER(TVENC_BASE+0x24, REG_TVENC_SYNCDELTA_H);
//REGISTER(TVENC_BASE+0x25, REG_TVENC_SYNCDELTA_L);
//REGISTER(TVENC_BASE+0x26, REG_TVENC_BURSTDELTA_H);
//REGISTER(TVENC_BASE+0x27, REG_TVENC_BURSTDELTA_L);
//REGISTER(TVENC_BASE+0x28, REG_TVENC_SYNCSTEPS);
//REGISTER(TVENC_BASE+0x29, REG_TVENC_BURSTSTEPS);
//REGISTER(TVENC_BASE+0x2A, REG_TVENC_CHROMASAT_H);
//REGISTER(TVENC_BASE+0x2B, REG_TVENC_CHROMASAT_L);
//REGISTER(TVENC_BASE+0x2C, REG_TVENC_SCSHIFT_3);
//REGISTER(TVENC_BASE+0x2D, REG_TVENC_SCSHIFT_2);
//REGISTER(TVENC_BASE+0x2E, REG_TVENC_SCSHIFT_1);
//REGISTER(TVENC_BASE+0x2F, REG_TVENC_SCSHIFT_0);
//REGISTER(TVENC_BASE+0x30, REG_TVENC_SCUSER_H);
//REGISTER(TVENC_BASE+0x31, REG_TVENC_SCUSER_L);
//REGISTER(TVENC_BASE+0x32, REG_TVENC_SCACTIVE_H);
//REGISTER(TVENC_BASE+0x33, REG_TVENC_SCACTIVE_L);
//REGISTER(TVENC_BASE+0x34, REG_TVENC_SCHADJ);
//REGISTER(TVENC_BASE+0x36, REG_TVENC_HCSYNCON_H);
//REGISTER(TVENC_BASE+0x37, REG_TVENC_HCSYNCON_L);
//REGISTER(TVENC_BASE+0x38, REG_TVENC_HCSYNCOFF_H);
//REGISTER(TVENC_BASE+0x39, REG_TVENC_HCSYNCOFF_L);
//REGISTER(TVENC_BASE+0x3A, REG_TVENC_HCBURSTON_H);
//REGISTER(TVENC_BASE+0x3B, REG_TVENC_HCBURSTON_L);
//REGISTER(TVENC_BASE+0x3C, REG_TVENC_HCBURSTOFF_H);
//REGISTER(TVENC_BASE+0x3D, REG_TVENC_HCBURSTOFF_L);
//REGISTER(TVENC_BASE+0x3E, REG_TVENC_HCACTIVEON_H);
//REGISTER(TVENC_BASE+0x3F, REG_TVENC_HCACTIVEON_L);
//REGISTER(TVENC_BASE+0x40, REG_TVENC_HCACTIVEOFF_H);
//REGISTER(TVENC_BASE+0x41, REG_TVENC_HCACTIVEOFF_L);
//REGISTER(TVENC_BASE+0x42, REG_TVENC_HCVALIDON_H);
//REGISTER(TVENC_BASE+0x43, REG_TVENC_HCVALIDON_L);
//REGISTER(TVENC_BASE+0x44, REG_TVENC_HCVALIDOFF_H);
//REGISTER(TVENC_BASE+0x45, REG_TVENC_HCVALIDOFF_L);
//REGISTER(TVENC_BASE+0x46, REG_TVENC_COEF_DFLY_4);
//REGISTER(TVENC_BASE+0x47, REG_TVENC_COEF_DFLY_3);
//REGISTER(TVENC_BASE+0x48, REG_TVENC_COEF_DFLY_2);
//REGISTER(TVENC_BASE+0x49, REG_TVENC_COEF_DFLY_1);
//REGISTER(TVENC_BASE+0x4A, REG_TVENC_COEF_DFLY_0);
//REGISTER(TVENC_BASE+0x4B, REG_TVENC_COEF_DFLU_4);
//REGISTER(TVENC_BASE+0x4C, REG_TVENC_COEF_DFLU_3);
//REGISTER(TVENC_BASE+0x4D, REG_TVENC_COEF_DFLU_2);
//REGISTER(TVENC_BASE+0x4E, REG_TVENC_COEF_DFLU_1);
//REGISTER(TVENC_BASE+0x4F, REG_TVENC_COEF_DFLU_0);
//REGISTER(TVENC_BASE+0x50, REG_TVENC_COEF_BOXY_7);
//REGISTER(TVENC_BASE+0x51, REG_TVENC_COEF_BOXY_6);
//REGISTER(TVENC_BASE+0x52, REG_TVENC_COEF_BOXY_5);
//REGISTER(TVENC_BASE+0x53, REG_TVENC_COEF_BOXY_4);
//REGISTER(TVENC_BASE+0x54, REG_TVENC_COEF_BOXY_3);
//REGISTER(TVENC_BASE+0x55, REG_TVENC_COEF_BOXY_2);
//REGISTER(TVENC_BASE+0x56, REG_TVENC_COEF_BOXY_1);
//REGISTER(TVENC_BASE+0x57, REG_TVENC_COEF_BOXY_0);
//REGISTER(TVENC_BASE+0x58, REG_TVENC_COEF_BOXU_7);
//REGISTER(TVENC_BASE+0x59, REG_TVENC_COEF_BOXU_6);
//REGISTER(TVENC_BASE+0x5A, REG_TVENC_COEF_BOXU_5);
//REGISTER(TVENC_BASE+0x5B, REG_TVENC_COEF_BOXU_4);
//REGISTER(TVENC_BASE+0x5C, REG_TVENC_COEF_BOXU_3);
//REGISTER(TVENC_BASE+0x5D, REG_TVENC_COEF_BOXU_2);
//REGISTER(TVENC_BASE+0x5E, REG_TVENC_COEF_BOXU_1);
//REGISTER(TVENC_BASE+0x5F, REG_TVENC_COEF_BOXU_0);
//REGISTER(TVENC_BASE+0x60, REG_TVENC_COEF_GAUY_3);
//REGISTER(TVENC_BASE+0x61, REG_TVENC_COEF_GAUY_2);
//REGISTER(TVENC_BASE+0x62, REG_TVENC_COEF_GAUY_1);
//REGISTER(TVENC_BASE+0x63, REG_TVENC_COEF_GAUY_0);
//REGISTER(TVENC_BASE+0x64, REG_TVENC_COEF_GAUU_3);
//REGISTER(TVENC_BASE+0x65, REG_TVENC_COEF_GAUU_2);
//REGISTER(TVENC_BASE+0x66, REG_TVENC_COEF_GAUU_1);
//REGISTER(TVENC_BASE+0x67, REG_TVENC_COEF_GAUU_0);
//REGISTER(TVENC_BASE+0x68, REG_TVENC_COEF_CMX_7);
//REGISTER(TVENC_BASE+0x69, REG_TVENC_COEF_CMX_6);
//REGISTER(TVENC_BASE+0x6A, REG_TVENC_COEF_CMX_5);
//REGISTER(TVENC_BASE+0x6B, REG_TVENC_COEF_CMX_4);
//REGISTER(TVENC_BASE+0x6C, REG_TVENC_COEF_CMX_3);
//REGISTER(TVENC_BASE+0x6D, REG_TVENC_COEF_CMX_2);
//REGISTER(TVENC_BASE+0x6E, REG_TVENC_COEF_CMX_1);
//REGISTER(TVENC_BASE+0x6F, REG_TVENC_COEF_CMX_0);
//REGISTER(TVENC_BASE+0x70, REG_TVENC_SCALING_3);
//REGISTER(TVENC_BASE+0x71, REG_TVENC_SCALING_2);
//REGISTER(TVENC_BASE+0x72, REG_TVENC_SCALING_1);
//REGISTER(TVENC_BASE+0x73, REG_TVENC_SCALING_0);
//REGISTER(TVENC_BASE+0x74, REG_TVENC_HEIGHT_H);
//REGISTER(TVENC_BASE+0x75, REG_TVENC_HEIGHT_L);
//
//#define OSDCAL_BASE	0x0C00
//REGISTER(OSDCAL_BASE+0x00, REG_OSDCAL_CTL);
//#define OSDCAL_CTL_ENA	0x02
//#define OSDCAL_CTL_HOR	0x01
//#define OSDCAL_CTL_VER	0x00
//REGISTER(OSDCAL_BASE+0x01, REG_OSDCAL_ROWH);
//REGISTER(OSDCAL_BASE+0x02, REG_OSDCAL_ROWL);
//REGISTER(OSDCAL_BASE+0x03, REG_OSDCAL_COLH);
//REGISTER(OSDCAL_BASE+0x04, REG_OSDCAL_COLL);
//REGISTER(OSDCAL_BASE+0x05, REG_OSDCAL_WIDH);
//REGISTER(OSDCAL_BASE+0x06, REG_OSDCAL_WIDL);
//REGISTER(OSDCAL_BASE+0x07, REG_OSDCAL_HGTH);
//REGISTER(OSDCAL_BASE+0x08, REG_OSDCAL_HGTL);
//REGISTER(OSDCAL_BASE+0x09, REG_OSDCAL_BLOCKSIZE);
//REGISTER(OSDCAL_BASE+0x0A, REG_OSDCAL_STATUS);
//#define OSDCAL_STATUS OSDCAL_BASE+0x0A
//#define OSDCAL_STATUS_DONE	0x01
//#define OSDCAL_HISTLIST0	OSDCAL_BASE+0x10
//#define OSDCAL_HISTLIST1	OSDCAL_BASE+0x14
//#define OSDCAL_HISTLIST2	OSDCAL_BASE+0x18
//#define OSDCAL_HISTLIST3	OSDCAL_BASE+0x1C
//#define OSDCAL_HISTLIST4	OSDCAL_BASE+0x20
//#define OSDCAL_HISTLIST5	OSDCAL_BASE+0x24
//#define OSDCAL_HISTLIST6	OSDCAL_BASE+0x28
//#define OSDCAL_HISTLIST7	OSDCAL_BASE+0x2C
///*REGISTER(OSDCAL_BASE+0x10, REG_OSDCAL_HISTLIST0);
//REGISTER(OSDCAL_BASE+0x14, REG_OSDCAL_HISTLIST1);
//REGISTER(OSDCAL_BASE+0x18, REG_OSDCAL_HISTLIST2);
//REGISTER(OSDCAL_BASE+0x1C, REG_OSDCAL_HISTLIST3);
//REGISTER(OSDCAL_BASE+0x20, REG_OSDCAL_HISTLIST4);
//REGISTER(OSDCAL_BASE+0x24, REG_OSDCAL_HISTLIST5);
//REGISTER(OSDCAL_BASE+0x28, REG_OSDCAL_HISTLIST6);
//REGISTER(OSDCAL_BASE+0x2C, REG_OSDCAL_HISTLIST7);*/
//
//#define MBIST_BASE	0x0D00
//REGISTER(MBIST_BASE+0x00, REG_MBIST_AUTO_START);
//REGISTER(MBIST_BASE+0x01, REG_MBIST_AUTO_STATUS);

#endif //_OV480_H_

